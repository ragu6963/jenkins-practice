name: Deploy Docker

# main 브랜치의 workflow.yml 파일이 변경될 때 실행되는 워크플로우
on:
  push:
    branches:
      - main

jobs:
  docker-build-push:
    runs-on: ubuntu-24.04

    steps:
      # 소스 코드를 워크스페이스로 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # SSH 에이전트 설정
      - name: SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 원격 서버의 호스트 키를 known_hosts에 추가
      - name: Add Host Key to Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Docker Buildx 설정 - GitHub Actions 캐시 활성화
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container # BuildKit 컨테이너 드라이버 사용
          buildkitd-flags: --debug

      # DockerHub 로그인
      - name: DockerHub Login
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      # 환경 변수 파일 생성
      - name: Create .env file
        run: |
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env

      # Docker 이미지 빌드 (BuildKit과 gha 캐시 사용)
      - name: Docker Image Build
        run: |
          DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 \
          docker compose -f docker-compose-actions.yml build \
            --progress=plain

      # Docker 이미지 푸시
      - name: Docker Image Push
        run: docker compose -f docker-compose-actions.yml push

      # 원격 서버에 GitHub 저장소 복제 또는 업데이트
      - name: Checkout GitHub Repository to Remote Server
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} '
            if [ -d "$HOME/work-directory" ]; then
              cd $HOME/work-directory
              git fetch origin main
              git reset --hard origin/main
            else
              git clone --depth=1 -b main ${{ github.server_url }}/${{ github.repository }} ~/work-directory
            fi
            '

      # 환경 변수 파일을 원격 서버로 복사
      - name: Copy Env File
        run: scp .env ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/work-directory/.env

      # 원격 서버에서 최신 Docker 이미지 pull & 컨테이너 실행
      - name: Pull Docker Images
        run: ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'cd ~/work-directory && docker compose -f docker-compose-actions.yml  up --pull always -d'

      # 사용하지 않는 Docker 이미지 정리하여 디스크 공간 확보
      - name: Docker Clean
        run: ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'docker image prune -f'
